package mocks

import cfclient "github.com/cloudfoundry-community/go-cfclient"
import mock "github.com/stretchr/testify/mock"

// PAASClient is an autogenerated mock type for the PAASClient type
type PAASClient struct {
	mock.Mock
}

// AssociateOrgAuditorByUsername provides a mock function with given fields: orgID, userName
func (_m *PAASClient) AssociateOrgAuditorByUsername(orgID string, userName string) (cfclient.Org, error) {
	ret := _m.Called(orgID, userName)

	var r0 cfclient.Org
	if rf, ok := ret.Get(0).(func(string, string) cfclient.Org); ok {
		r0 = rf(orgID, userName)
	} else {
		r0 = ret.Get(0).(cfclient.Org)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgID, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateOrgUserByUsername provides a mock function with given fields: orgID, userName
func (_m *PAASClient) AssociateOrgUserByUsername(orgID string, userName string) (cfclient.Org, error) {
	ret := _m.Called(orgID, userName)

	var r0 cfclient.Org
	if rf, ok := ret.Get(0).(func(string, string) cfclient.Org); ok {
		r0 = rf(orgID, userName)
	} else {
		r0 = ret.Get(0).(cfclient.Org)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgID, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSpaceAuditorByUsername provides a mock function with given fields: spaceID, userName
func (_m *PAASClient) AssociateSpaceAuditorByUsername(spaceID string, userName string) (cfclient.Space, error) {
	ret := _m.Called(spaceID, userName)

	var r0 cfclient.Space
	if rf, ok := ret.Get(0).(func(string, string) cfclient.Space); ok {
		r0 = rf(spaceID, userName)
	} else {
		r0 = ret.Get(0).(cfclient.Space)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(spaceID, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSpaceDeveloperByUsername provides a mock function with given fields: spaceID, userName
func (_m *PAASClient) AssociateSpaceDeveloperByUsername(spaceID string, userName string) (cfclient.Space, error) {
	ret := _m.Called(spaceID, userName)

	var r0 cfclient.Space
	if rf, ok := ret.Get(0).(func(string, string) cfclient.Space); ok {
		r0 = rf(spaceID, userName)
	} else {
		r0 = ret.Get(0).(cfclient.Space)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(spaceID, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: req
func (_m *PAASClient) CreateUser(req cfclient.UserRequest) (cfclient.User, error) {
	ret := _m.Called(req)

	var r0 cfclient.User
	if rf, ok := ret.Get(0).(func(cfclient.UserRequest) cfclient.User); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(cfclient.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(cfclient.UserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: userID
func (_m *PAASClient) DeleteUser(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSpaceByGuid provides a mock function with given fields: guid
func (_m *PAASClient) GetSpaceByGuid(guid string) (cfclient.Space, error) {
	ret := _m.Called(guid)

	var r0 cfclient.Space
	if rf, ok := ret.Get(0).(func(string) cfclient.Space); ok {
		r0 = rf(guid)
	} else {
		r0 = ret.Get(0).(cfclient.Space)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceInstanceByGuid provides a mock function with given fields: guid
func (_m *PAASClient) ServiceInstanceByGuid(guid string) (cfclient.ServiceInstance, error) {
	ret := _m.Called(guid)

	var r0 cfclient.ServiceInstance
	if rf, ok := ret.Get(0).(func(string) cfclient.ServiceInstance); ok {
		r0 = rf(guid)
	} else {
		r0 = ret.Get(0).(cfclient.ServiceInstance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
